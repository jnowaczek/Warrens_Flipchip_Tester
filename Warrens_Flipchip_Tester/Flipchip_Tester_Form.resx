<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>The USB/SPI cable is an FTDI C232HM-DDHSL-0. Digi-Key, Farnell, and Mouser usually have lots of them in stock for about $25.
You can find technical details on the USB/SPI cable here: http://www.ftdichip.com/Products/Cables/USBMPSSE.htm

You must replace the standard Windows driver for the USB/SPI cable with the FTDI D2XX driver.
You can download the Windows D2XX driver and installation guide here: http://www.ftdichip.com/Drivers/D2XX.htm

The FTDI LibMPSSE-SPI library provides the SPI protocol for this application.
A wrapper library provides an interface between this managed code application and the LibMPSSE-SPI library.
Both the libMPSSE.dll and libMPSSEWrapper.dll files need to be in the same directory as the Warrens_Flipchip_Tester.exe file.

The FlipChip Tester needs to be supplied with +5V to power the FlipChip and the SPI GPIO chips.

The toggle switch needs to be set towards the right to enable +5V power to the FlipChip.
The amber LED will illuminate when the +5V power to the FlipChip is on.
You should turn off the +5V when installing or removing a FlipChip.

The Green LED will turn on at the beginning of a test, and will stay on as long as no faults are found.
The Yellow LED will illuminate when a test is running.
The Red LED will illuminate if a fault is found during a test.

    Copyright (C) 2018-2021, The Rhode Island Computer Museum

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.

    Author(s):
        Michael Thompson &lt;mike@ricomputermuseum.org&gt;
</value>
  </data>
  <metadata name="FlipChipTestBackgroundWorker.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        bWNPZFwsPTlJWFQAAAAAAACBiZCfqKxyfoCapqaFk5FufXl6i4dzhIBvgHxte3l8ioiCjo51gYFia25P
        WVmAi4lpdHFCSURcY1x5gHmMlIp1f3OAjoJkdmlKYVM+WEtVb2JOZV0yRz9RYFwAAAAAAAB4gIdZYmZT
        X2GJlZWbqadjcm5AT0uLm5RdbWZMWlZZZ2NueXeHkpBocHBASkppdnRldHBHU01TXlaAiIF2f3VbaV15
        in1YbF9GX1E+Wk1LZ1pHX1czSkJNXloAAAAAAACRmp5ocXRibm6eq6mAjoxpeHSJmJRsfHWDk4yFk49w
        fnqJlJJhbGpXX191gH53iIRZa2RLW1RTYFhueW9baV5XaFthdWhgeWtSb2BRb2JYdmlYc2lPZ19ccGsA
        AAAAAACcpah5goUkMDCCj42AjoyKmZVjdW5AUkt4ioNufnd3h4CWpKBATkotODZhbmx1iYR8k4tCVE0p
        OjF5iX5MXFEfMSROZVdifG5WdWZae21egXNkhHlkgndmfnYAAAAAAAB9iYmFkZEzQUB5h4VNXltrfHgv
        RDwlOjJab2dNX1iGmJF2hYEtPDgkMi5peHR1jYVrhn09VUssPzZpem9HWE0cMiYvSDpTcGFGZ1hRdWdW
        emxfgXZlg3hfenEAAAAAAAB3h4aElJMnOjdnendbcG1sgn0kOjUqQTlGXVVFWlKEmZFwgnsyRD0cLCVc
        cWlog3p4lotCW1ErQzlzhn1Wal4gNio8VklUcmVJbF5bf3NcgHRhg3hlhXpfenAAAAAAAACAkpFugX4g
        NTJid3RZcGxieXRlf3lbdW9mgXhogHhxiYFyiYErQjoWKyNwh39ngnhohntEXVM1TUNZbGNMX1YqPzYx
        SkBaeG1OcGVjh3tghHhegHVggHVddmwAAAAAAAB6kY1nfnpbdHBTbGhUb2t4k49vioZphIBjf3ldd3F1
        j4lZcWlgeHBTamJUbGRcd25nhHtOZl5cc2tjdW5Za2RGW1NSaWFcd25aeXBmiH5egHZgf3ZjgHdjenIA
        AAAAAAB/lpJbcm5OZ2Nie3difXlngn9qiINlgH1HYl5rhoJlf3lviYNNZV02TUVXb2dadWxCWlI1TERO
        X1tpeHRca2cmNzROYV5jenZhe3Vzj4leenRxi4VxiYFlenIAAAAAAABcbm1db255jox/lZN7k5Fzi4tv
        iodje3tshIJacnBof3t0ioVedG9gdW16j4eEmpVkenVKW1dpdnRibWtbZmRlcXFUYmFSZGNhdnRacG55
        kIxsgX5VZmJLWVUAAAAAAAB5h4Z+jIt9jI5sfn93iItyhYiClZhxhIdne3xSZGV9j451hoNaaWVcamZ8
        i4dpenZkdXJFUlBpcXF5fn9bYGNgZGllbnJwfIBWZWdYZ2laamlNW1pMWVdZYWAAAAAAAADGy861ur2Z
        n6S1vsKlrbQuOD8PGSA6REs2QUWpsralrrEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACvr7VgX2gO
        EBguNDspMzqmsLeQm5+RmJuTmJmUlpcAAAAAAAAAAAAAAAAAAAD9/P/CxMw0NT8EBhAnKDIsLjabnaUA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEvslUTlkHAw4YGCQ8PkiFipMAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACzq7aVj5qTjJmkoKylnqtaVF8gGyTc1dwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABFO0d5b3yLhJGVkJ+PjZk0NT+/vsf29PoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADbz9sAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAA4ABgAOAAYADgAGAAYABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABgA/4AfAf+B/wD/gH///7/w==
</value>
  </data>
</root>